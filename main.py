import telebot
from telebot import types
import random
from models import User, Word, UserWord
from database import session, init_db
from config import TOKEN

bot = telebot.TeleBot(TOKEN)
user_states = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add("üéì –ò–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π", "üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "‚ÑπÔ∏è –ü–æ–º–æ—â—å", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
    return markup

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ç–∞—Ä—Ç–∞
@bot.message_handler(commands=["start"])
def start(message):
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    if not user:
        user = User(
            telegram_id=message.from_user.id,
            username=message.from_user.username
        )
        session.add(user)
        session.commit()

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Å–ª–æ–≤–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        system_user = session.query(User).filter_by(telegram_id=0).first()
        if system_user:
            system_words = session.query(Word).all()  # –£–±–∏—Ä–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ created_by
            for word in system_words:
                user_word = UserWord(user_id=user.id, word_id=word.id)
                session.add(user_word)
            session.commit()

    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!",
        reply_markup=main_markup()
    )

# –ü–æ–º–æ—â—å
@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å")
def help(message):
    text = (
        "üìö –≠—Ç–æ –±–æ—Ç –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö —Å–ª–æ–≤.\n\n"
        "üéì –ù–∞–∂–º–∏ '–ò–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π' –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n"
        "üìù –ò—Å–ø–æ–ª—å–∑—É–π '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ' –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–ª–æ–≤\n"
        "üóëÔ∏è –£–¥–∞–ª—è–π –Ω–µ–Ω—É–∂–Ω—ã–µ —Å–ª–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'\n"
        "‚ÑπÔ∏è –ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É –æ —Ñ—É–Ω–∫—Ü–∏—è—Ö –±–æ—Ç–∞"
    )
    bot.send_message(message.chat.id, text)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda m: m.text == "üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
def add_word(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Å–ª–æ–≤–æ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, process_english)

def process_english(message):
    user_states[message.from_user.id] = {"english": message.text}
    msg = bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–æ–º:")
    bot.register_next_step_handler(msg, process_russian)

def process_russian(message):
    user_id = message.from_user.id
    english = user_states[user_id]["english"]
    russian = message.text

    user = session.query(User).filter_by(telegram_id=user_id).first()

    # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ
    new_word = Word(english=english, russian=russian)
    session.add(new_word)
    session.commit()

    # –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    user_word = UserWord(user_id=user.id, word_id=new_word.id)
    session.add(user_word)
    session.commit()

    del user_states[user_id]
    bot.send_message(message.chat.id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!", reply_markup=main_markup())

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda m: m.text == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
def delete_word(message):
    msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
    bot.register_next_step_handler(msg, process_word_to_delete)

def process_word_to_delete(message):
    user_id = message.from_user.id
    word_to_delete = message.text

    user = session.query(User).filter_by(telegram_id=user_id).first()

    word = session.query(Word).filter_by(english=word_to_delete).first()
    if word:
        user_word = session.query(UserWord).filter_by(user_id=user.id, word_id=word.id).first()
        if user_word:
            session.delete(user_word)
            session.commit()
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ!", reply_markup=main_markup())
        else:
            bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —É –≤–∞—Å!", reply_markup=main_markup())
    else:
        bot.send_message(message.chat.id, f"–°–ª–æ–≤–æ '{word_to_delete}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.",
                         reply_markup=main_markup())

# –û–±—É—á–µ–Ω–∏–µ
@bot.message_handler(func=lambda m: m.text == "üéì –ò–∑—É—á–∞—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π")
def study(message):
    user = session.query(User).filter_by(telegram_id=message.from_user.id).first()
    words = (
        session.query(Word)
        .join(UserWord)
        .filter(UserWord.user_id == user.id, UserWord.learned == False)
        .limit(4)  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ 4 —Å–ª—É—á–∞–π–Ω—ã—Ö —Å–ª–æ–≤–∞
        .all()
    )

    if not words:
        bot.send_message(message.chat.id, "–¢—ã –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–∏–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å–ª–æ–≤–∞ üò¢")
        return

    word = random.choice(words)
    correct = word.russian

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    all_ru = [w.russian for w in session.query(Word).filter(Word.russian != correct).all()]
    wrong = random.sample(all_ru, 4) if len(all_ru) >= 4 else ["–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏"] * 4

    options = [correct] + wrong
    random.shuffle(options)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    for opt in options:
        markup.add(types.KeyboardButton(opt))

    user_states[message.from_user.id] = {
        "word_id": word.id,
        "correct": correct,
        "attempts": 0
    }

    bot.send_message(
        message.chat.id,
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–ª–æ–≤–æ: **{word.english}**?",
        parse_mode="Markdown",
        reply_markup=markup
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda m: m.from_user.id in user_states)
def check_answer(message):
    user_id = message.from_user.id
    data = user_states[user_id]

    if message.text == data["correct"]:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        user_word = (
            session.query(UserWord)
            .filter_by(
                user_id=session.query(User.id).filter_by(telegram_id=user_id).scalar(),
                word_id=data["word_id"]
            )
            .first()
        )
        user_word.correct_attempts += 1

        if user_word.correct_attempts >= 3:
            user_word.learned = True
            session.commit()
            bot.send_message(message.chat.id, "üéâ –°–ª–æ–≤–æ –≤—ã—É—á–µ–Ω–æ!", reply_markup=main_markup())
        else:
            session.commit()
            bot.send_message(message.chat.id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ï—â–µ —Ä–∞–∑–æ–∫?", reply_markup=main_markup())

        del user_states[user_id]
    else:
        data["attempts"] += 1
        if data["attempts"] >= 2:
            bot.send_message(
                message.chat.id,
                f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {data['correct']}",
                reply_markup=main_markup()
            )
            del user_states[user_id]
        else:
            bot.send_message(message.chat.id, "üòï –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑:")

if __name__ == "__main__":
    print('bot is running')
    init_db()
    bot.infinity_polling()